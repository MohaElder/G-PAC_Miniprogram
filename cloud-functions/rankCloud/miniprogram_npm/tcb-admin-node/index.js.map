{"version":3,"sources":["index.js","src\\storage\\index.js","src\\utils\\httpRequest.js","src\\utils\\auth.js","src\\db\\index.js","src\\db\\db.js","src\\db\\geo\\index.js","src\\db\\geo\\point.js","src\\db\\validate.js","src\\db\\constant.js","src\\db\\util.js","src\\db\\command.js","src\\db\\regexp.js","src\\db\\serverDate\\index.js","src\\db\\collection.js","src\\db\\document.js","src\\db\\request.js","src\\db\\query.js","src\\functions\\index.js","src\\wx\\index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AKfA,ADGA,AHSA,AENA,ADGA;AFOA,AKfA,ADGA,AHSA,AENA,ADGA;AFOA,AKfA,ADGA,AHSA,AENA,ADGA;AFOA,AKfA,ACHA,AFMA,AHSA,AENA,ADGA;AFOA,AKfA,ACHA,ALeA,AENA,ADGA;AFOA,AKfA,ACHA,ALeA,AENA,ADGA;AFOA,AKfA,ACHA,ACHA,ANkBA,AENA,ADGA;AFOA,AKfA,ACHA,ACHA,ANkBA,AENA,ADGA;AFOA,AKfA,ACHA,ACHA,ANkBA,AENA,ADGA;AFOA,AKfA,ACHA,ACHA,ACHA,APqBA,AENA,ADGA;AFOA,AKfA,AENA,ACHA,APqBA,AENA,ADGA;AFOA,AKfA,AENA,ACHA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,ACHA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,ACHA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,ACHA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,AFMA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,AFMA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,AFMA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AOrBA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AOrBA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AOrBA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AU9BA,AHSA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AU9BA,AHSA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AU9BA,AHSA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AU9BA,AHSA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,AhBgDA;AU7BA,AIZA,AENA,AhBgDA;AczCA,AENA,AhBgDA;AczCA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const storage = require(\"./src/storage\");\r\nconst database = require(\"./src/db\").Db;\r\nconst functions = require(\"./src/functions\");\r\nconst wx = require(\"./src/wx\");\r\n\r\nfunction Tcb(config) {\r\n  // console.log(config)\r\n  this.config = config ? config : this.config\r\n}\r\n\r\nTcb.prototype.init = function ({\r\n  secretId,\r\n  secretKey,\r\n  sessionToken,\r\n  env,\r\n  proxy\r\n} = {}) {\r\n  if ((secretId && !secretKey) || (!secretId && secretKey)) {\r\n    throw Error(\"secretId and secretKey must be a pair\");\r\n  }\r\n\r\n  this.config = {\r\n    get secretId() {\r\n      return this._secretId\r\n        ? this._secretId\r\n        : process.env.TENCENTCLOUD_SECRETID;\r\n    },\r\n    set secretId(id) {\r\n      this._secretId = id;\r\n    },\r\n    get secretKey() {\r\n      return this._secretKey\r\n        ? this._secretKey\r\n        : process.env.TENCENTCLOUD_SECRETKEY;\r\n    },\r\n    set secretKey(key) {\r\n      this._secretKey = key;\r\n    },\r\n    get sessionToken() {\r\n      if (this._sessionToken === undefined) {\r\n        //默认临时密钥\r\n        return process.env.TENCENTCLOUD_SESSIONTOKEN;\r\n      } else if (this._sessionToken === false) {\r\n        //固定秘钥\r\n        return undefined;\r\n      } else {\r\n        //传入的临时密钥\r\n        return this._sessionToken;\r\n      }\r\n    },\r\n    set sessionToken(token) {\r\n      this._sessionToken = token;\r\n    },\r\n    envName: env,\r\n    proxy: proxy\r\n  };\r\n\r\n  this.config.secretId = secretId;\r\n  this.config.secretKey = secretKey;\r\n  this.config.sessionToken = sessionToken ? sessionToken : (secretId && secretKey ? false : undefined);\r\n\r\n  return new Tcb(this.config);\r\n};\r\n\r\nTcb.prototype.database = function () {\r\n  return new database(this);\r\n};\r\n\r\nfunction each(obj, fn) {\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      fn(obj[i], i);\r\n    }\r\n  }\r\n}\r\n\r\nfunction extend(target, source) {\r\n  each(source, function (val, key) {\r\n    target[key] = source[key];\r\n  });\r\n  return target;\r\n}\r\n\r\nextend(Tcb.prototype, functions);\r\nextend(Tcb.prototype, storage);\r\nextend(Tcb.prototype, wx)\r\n\r\nmodule.exports = new Tcb();\r\n","const request = require(\"request\");\r\nconst fs = require('fs');\r\nconst httpRequest = require(\"../utils/httpRequest\");\r\n\r\n/*\r\n * 上传文件\r\n * @param {string} cloudPath 上传后的文件路径\r\n * @param {fs.ReadStream} fileContent  上传文件的二进制流\r\n */\r\nfunction uploadFile({ cloudPath, fileContent }, { onResponseReceived } = {}) {\r\n  let params = {\r\n    action: \"storage.uploadFile\",\r\n    path: cloudPath,\r\n    file: fileContent\r\n  };\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: \"post\",\r\n    headers: {\r\n      // \"content-type\": \"multipart/form-data\"\r\n    },\r\n    callback: (response) => {\r\n      onResponseReceived && typeof onResponseReceived === 'function' && onResponseReceived(response)\r\n    }\r\n  }).then((res) => {\r\n    if (res.code) {\r\n      return res;\r\n    } else {\r\n      return {\r\n        fileID: res.data.fileID,\r\n        requestId: res.requestId\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 删除文件\r\n * @param {Array.<string>} fileList 文件id数组\r\n */\r\nasync function deleteFile({ fileList }) {\r\n  if (!fileList || !Array.isArray(fileList)) {\r\n    return {\r\n      code: \"INVALID_PARAM\",\r\n      message: \"fileList必须是非空的数组\"\r\n    };\r\n  }\r\n\r\n  for (let file of fileList) {\r\n    if (!file || typeof file != \"string\") {\r\n      return {\r\n        code: \"INVALID_PARAM\",\r\n        message: \"fileList的元素必须是非空的字符串\"\r\n      };\r\n    }\r\n  }\r\n\r\n  let params = {\r\n    action: \"storage.batchDeleteFile\",\r\n    fileid_list: fileList\r\n  };\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: \"post\",\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  }).then(res => {\r\n    if (res.code) {\r\n      return res;\r\n    } else {\r\n      return {\r\n        fileList: res.data.delete_list,\r\n        requestId: res.requestId\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 获取文件下载链接\r\n * @param {Array.<Object>} fileList\r\n */\r\nasync function getTempFileURL({ fileList }) {\r\n  if (!fileList || !Array.isArray(fileList)) {\r\n    return {\r\n      code: \"INVALID_PARAM\",\r\n      message: \"fileList必须是非空的数组\"\r\n    };\r\n  }\r\n\r\n  let file_list = [];\r\n  for (let file of fileList) {\r\n    if (typeof file === 'object') {\r\n      if (\r\n        !file.hasOwnProperty(\"fileID\") ||\r\n        !file.hasOwnProperty(\"maxAge\")\r\n      ) {\r\n        return {\r\n          code: \"INVALID_PARAM\",\r\n          message: \"fileList的元素必须是包含fileID和maxAge的对象\"\r\n        };\r\n      }\r\n\r\n      file_list.push({\r\n        fileid: file.fileID,\r\n        max_age: file.maxAge\r\n      });\r\n    } else if (typeof file === 'string') {\r\n      file_list.push({\r\n        fileid: file,\r\n      });\r\n    } else {\r\n      return {\r\n        code: \"INVALID_PARAM\",\r\n        message: \"fileList的元素必须是字符串\"\r\n      };\r\n    }\r\n  }\r\n\r\n  let params = {\r\n    action: \"storage.batchGetDownloadUrl\",\r\n    file_list\r\n  };\r\n  // console.log(params);\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: \"post\",\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  }).then(res => {\r\n    // console.log(res);\r\n    if (res.code) {\r\n      return res;\r\n    } else {\r\n      return {\r\n        fileList: res.data.download_list,\r\n        requestId: res.requestId\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nasync function downloadFile({ fileID, tempFilePath }) {\r\n  let tmpUrl,\r\n    self = this;\r\n  try {\r\n    const tmpUrlRes = await this.getTempFileURL({\r\n      fileList: [\r\n        {\r\n          fileID,\r\n          maxAge: 600\r\n        }\r\n      ]\r\n    });\r\n    // console.log(tmpUrlRes);\r\n    const res = tmpUrlRes.fileList[0]\r\n\r\n    if (\r\n      res.code != 'SUCCESS'\r\n    ) {\r\n      return res;\r\n    }\r\n\r\n    tmpUrl = res.tempFileURL;\r\n  } catch (e) {\r\n    throw e\r\n  }\r\n\r\n  let req = request({\r\n    url: tmpUrl,\r\n    encoding: null,\r\n    proxy: self.config.proxy\r\n  });\r\n\r\n  return new Promise((resolve, reject) => {\r\n    let fileContent = Buffer.alloc(0)\r\n    req.on('response', function (response) {\r\n      if (response && +response.statusCode === 200) {\r\n        if (tempFilePath) {\r\n          response.pipe(fs.createWriteStream(tempFilePath));\r\n        } else {\r\n          response.on('data', (data) => {\r\n            fileContent = Buffer.concat([fileContent, data])\r\n          })\r\n        }\r\n        response.on('end', () => {\r\n          resolve({\r\n            fileContent: tempFilePath ? undefined : fileContent,\r\n            message: '文件下载完成'\r\n          })\r\n        })\r\n      } else {\r\n        reject(response)\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexports.uploadFile = uploadFile;\r\nexports.deleteFile = deleteFile;\r\nexports.getTempFileURL = getTempFileURL;\r\nexports.downloadFile = downloadFile;\r\n","var request = require(\"request\");\r\nvar auth = require(\"./auth.js\");\r\n\r\nmodule.exports = function (args) {\r\n  var config = args.config,\r\n    params = args.params,\r\n    method = args.method || \"get\";\r\n\r\n  const eventId = (new Date()).valueOf() + '_' + Math.random().toString().substr(2,5)\r\n\r\n  params = Object.assign({}, params, {\r\n    envName: config.envName,\r\n    timestamp: new Date().valueOf(),\r\n    eventId\r\n  });\r\n\r\n  for (let key in params) {\r\n    if (params[key] === undefined) {\r\n      delete params[key];\r\n    }\r\n  }\r\n\r\n  let file = null;\r\n  if (params.action === \"storage.uploadFile\") {\r\n    file = params[\"file\"];\r\n    delete params[\"file\"];\r\n  }\r\n\r\n  if (!config.secretId || !config.secretKey) {\r\n    if (process.env.TENCENTCLOUD_RUNENV === 'SCF') {\r\n      throw Error(\"missing authoration key, redeploy the function\")\r\n    }\r\n    throw Error(\"missing secretId or secretKey of tencent cloud\");\r\n  }\r\n\r\n  const authObj = {\r\n    SecretId: config.secretId,\r\n    SecretKey: config.secretKey,\r\n    Method: method,\r\n    pathname: \"/admin\",\r\n    Query: params,\r\n    Headers: Object.assign(\r\n      {\r\n        \"user-agent\": \"tcb-admin-sdk\"\r\n      },\r\n      args.headers || {}\r\n    )\r\n  };\r\n\r\n  var authorization = auth.getAuth(authObj);\r\n\r\n  params.authorization = authorization;\r\n  file && (params.file = file);\r\n  config.sessionToken && (params.sessionToken = config.sessionToken);\r\n\r\n  // console.log(params);\r\n  var opts = {\r\n    // url: 'http://localhost:8002/admin',\r\n    url: \"http://tcb-admin.tencentcloudapi.com/admin\",\r\n    method: args.method || \"get\",\r\n    timeout: args.timeout || 50000,\r\n    headers: authObj.Headers,\r\n    proxy: config.proxy\r\n  };\r\n\r\n  if (params.action === \"storage.uploadFile\") {\r\n    opts.formData = params;\r\n    opts.formData.file = {\r\n      value: params.file,\r\n      options: {\r\n        filename: params.path\r\n      }\r\n    };\r\n  } else if (args.method == \"post\") {\r\n    opts.body = params;\r\n    opts.json = true;\r\n  } else {\r\n    opts.qs = params;\r\n  }\r\n\r\n  if (params.action === 'wx.api') {\r\n    opts.url = 'https://tcb-open.tencentcloudapi.com/admin'\r\n  }\r\n\r\n  if (args.proxy) {\r\n    opts.proxy = args.proxy;\r\n  }\r\n\r\n  opts.url = `${opts.url}?eventId=${eventId}`\r\n\r\n  // console.log(JSON.stringify(opts));\r\n  return new Promise(function (resolve, reject) {\r\n    request(opts, function (err, response, body) {\r\n      // console.log(err, body);\r\n      args && args.callback && args.callback(response)\r\n\r\n      if (err === null && response.statusCode == 200) {\r\n        let res;\r\n        try {\r\n          res = typeof body === \"string\" ? JSON.parse(body) : body;\r\n        } catch (e) {\r\n          res = body;\r\n        }\r\n        return resolve(res);\r\n      } else {\r\n        return reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n","var crypto = require(\"crypto\");\r\n\r\nfunction camSafeUrlEncode(str) {\r\n  return encodeURIComponent(str)\r\n    .replace(/!/g, \"%21\")\r\n    .replace(/'/g, \"%27\")\r\n    .replace(/\\(/g, \"%28\")\r\n    .replace(/\\)/g, \"%29\")\r\n    .replace(/\\*/g, \"%2A\");\r\n}\r\nfunction map(obj, fn) {\r\n  var o = isArray(obj) ? [] : {};\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      o[i] = fn(obj[i], i);\r\n    }\r\n  }\r\n  return o;\r\n}\r\nfunction isArray(arr) {\r\n  return arr instanceof Array;\r\n}\r\n\r\nfunction clone(obj) {\r\n  return map(obj, function(v) {\r\n    return typeof v === \"object\" && v !== undefined && v !== null\r\n      ? clone(v)\r\n      : v;\r\n  });\r\n}\r\n//测试用的key后面可以去掉\r\nvar getAuth = function(opt) {\r\n  //   console.log(opt);\r\n  opt = opt || {};\r\n\r\n  var SecretId = opt.SecretId;\r\n  var SecretKey = opt.SecretKey;\r\n  var method = (opt.method || opt.Method || \"get\").toLowerCase();\r\n  var pathname = opt.pathname || \"/\";\r\n  var queryParams = clone(opt.Query || opt.params || {});\r\n  var headers = clone(opt.Headers || opt.headers || {});\r\n  pathname.indexOf(\"/\") !== 0 && (pathname = \"/\" + pathname);\r\n\r\n  if (!SecretId) return console.error(\"missing param SecretId\");\r\n  if (!SecretKey) return console.error(\"missing param SecretKey\");\r\n\r\n  var getObjectKeys = function(obj) {\r\n    var list = [];\r\n    for (var key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        if (obj[key] === undefined) {\r\n          continue;\r\n        }\r\n        list.push(key);\r\n      }\r\n    }\r\n    return list.sort();\r\n  };\r\n\r\n  var obj2str = function(obj) {\r\n    var i, key, val;\r\n    var list = [];\r\n    var keyList = getObjectKeys(obj);\r\n    for (i = 0; i < keyList.length; i++) {\r\n      key = keyList[i];\r\n      if (obj[key] === undefined) {\r\n        continue;\r\n      }\r\n      val = obj[key] === null ? \"\" : obj[key];\r\n      if (typeof val !== \"string\") {\r\n        val = JSON.stringify(val);\r\n      }\r\n      key = key.toLowerCase();\r\n      key = camSafeUrlEncode(key);\r\n      val = camSafeUrlEncode(val) || \"\";\r\n      list.push(key + \"=\" + val);\r\n    }\r\n    return list.join(\"&\");\r\n  };\r\n\r\n  // 签名有效起止时间\r\n  var now = parseInt(new Date().getTime() / 1000) - 1;\r\n  var exp = now;\r\n\r\n  var Expires = opt.Expires || opt.expires;\r\n  if (Expires === undefined) {\r\n    exp += 900; // 签名过期时间为当前 + 900s\r\n  } else {\r\n    exp += Expires * 1 || 0;\r\n  }\r\n\r\n  // 要用到的 Authorization 参数列表\r\n  var qSignAlgorithm = \"sha1\";\r\n  var qAk = SecretId;\r\n  var qSignTime = now + \";\" + exp;\r\n  var qKeyTime = now + \";\" + exp;\r\n  var qHeaderList = getObjectKeys(headers)\r\n    .join(\";\")\r\n    .toLowerCase();\r\n  var qUrlParamList = getObjectKeys(queryParams)\r\n    .join(\";\")\r\n    .toLowerCase();\r\n\r\n  // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778\r\n  // 步骤一：计算 SignKey\r\n  var signKey = crypto\r\n    .createHmac(\"sha1\", SecretKey)\r\n    .update(qKeyTime)\r\n    .digest(\"hex\");\r\n\r\n  // console.log(\"queryParams\", queryParams);\r\n  // console.log(obj2str(queryParams));\r\n\r\n  // 步骤二：构成 FormatString\r\n  var formatString = [\r\n    method,\r\n    pathname,\r\n    obj2str(queryParams),\r\n    obj2str(headers),\r\n    \"\"\r\n  ].join(\"\\n\");\r\n\r\n  // console.log(formatString);\r\n  formatString = Buffer.from(formatString, \"utf8\");\r\n\r\n  // 步骤三：计算 StringToSign\r\n  var sha1Algo = crypto.createHash(\"sha1\");\r\n  sha1Algo.update(formatString);\r\n  var res = sha1Algo.digest(\"hex\");\r\n  var stringToSign = [\"sha1\", qSignTime, res, \"\"].join(\"\\n\");\r\n\r\n  // console.log(stringToSign);\r\n  // 步骤四：计算 Signature\r\n  var qSignature = crypto\r\n    .createHmac(\"sha1\", signKey)\r\n    .update(stringToSign)\r\n    .digest(\"hex\");\r\n\r\n  // 步骤五：构造 Authorization\r\n  var authorization = [\r\n    \"q-sign-algorithm=\" + qSignAlgorithm,\r\n    \"q-ak=\" + qAk,\r\n    \"q-sign-time=\" + qSignTime,\r\n    \"q-key-time=\" + qKeyTime,\r\n    \"q-header-list=\" + qHeaderList,\r\n    \"q-url-param-list=\" + qUrlParamList,\r\n    \"q-signature=\" + qSignature\r\n  ].join(\"&\");\r\n\r\n  return authorization;\r\n};\r\n\r\nexports.getAuth = getAuth;\r\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./db\"));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Geo = require(\"./geo\");\r\nconst collection_1 = require(\"./collection\");\r\nconst command_1 = require(\"./command\");\r\nconst serverDate_1 = require(\"./serverDate\");\r\nconst request_1 = require(\"./request\");\r\nconst regexp_1 = require(\"./regexp\");\r\nclass Db {\r\n    constructor(config) {\r\n        this.config = config;\r\n        this.Geo = Geo;\r\n        this.command = new command_1.Command();\r\n        this.RegExp = regexp_1.RegExpConstructor;\r\n    }\r\n    serverDate({ offset = 0 } = {}) {\r\n        return new serverDate_1.ServerDate({ offset });\r\n    }\r\n    collection(collName) {\r\n        if (!collName) {\r\n            throw new Error(\"Collection name is required\");\r\n        }\r\n        return new collection_1.CollectionReference(this, collName);\r\n    }\r\n    createCollection(collName) {\r\n        let request = new request_1.Request(this);\r\n        const params = {\r\n            collectionName: collName\r\n        };\r\n        return request.send(\"addCollection\", params);\r\n    }\r\n}\r\nexports.Db = Db;\r\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./point\"));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst validate_1 = require(\"../validate\");\r\nclass Point {\r\n    constructor(longitude, latitude) {\r\n        validate_1.Validate.isGeopoint(\"longitude\", longitude);\r\n        validate_1.Validate.isGeopoint(\"latitude\", latitude);\r\n        this.longitude = longitude;\r\n        this.latitude = latitude;\r\n    }\r\n    parse(key) {\r\n        return {\r\n            [key]: {\r\n                type: 'Point',\r\n                coordinates: [this.longitude, this.latitude]\r\n            }\r\n        };\r\n    }\r\n}\r\nexports.Point = Point;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst constant_1 = require(\"./constant\");\r\nconst util_1 = require(\"./util\");\r\nclass Validate {\r\n    static isGeopoint(point, degree) {\r\n        if (util_1.Util.whichType(degree) !== constant_1.FieldType.Number) {\r\n            throw new Error(\"Geo Point must be number type\");\r\n        }\r\n        const degreeAbs = Math.abs(degree);\r\n        if (point === \"latitude\" && degreeAbs > 90) {\r\n            throw new Error(\"latitude should be a number ranges from -90 to 90\");\r\n        }\r\n        else if (point === \"longitude\" && degreeAbs > 180) {\r\n            throw new Error(\"longitude should be a number ranges from -180 to 180\");\r\n        }\r\n        return true;\r\n    }\r\n    static isInteger(param, num) {\r\n        if (!Number.isInteger(num)) {\r\n            throw new Error(param + constant_1.ErrorCode.IntergerError);\r\n        }\r\n        return true;\r\n    }\r\n    static isFieldOrder(direction) {\r\n        if (constant_1.OrderDirectionList.indexOf(direction) === -1) {\r\n            throw new Error(constant_1.ErrorCode.DirectionError);\r\n        }\r\n        return true;\r\n    }\r\n    static isFieldPath(path) {\r\n        if (!/^[a-zA-Z0-9-_\\.]/.test(path)) {\r\n            throw new Error();\r\n        }\r\n        return true;\r\n    }\r\n    static isOperator(op) {\r\n        if (constant_1.WhereFilterOpList.indexOf(op) === -1) {\r\n            throw new Error(constant_1.ErrorCode.OpStrError);\r\n        }\r\n        return true;\r\n    }\r\n    static isCollName(name) {\r\n        if (!/^[a-zA-Z0-9]([a-zA-Z0-9-_]){1,32}$/.test(name)) {\r\n            throw new Error(constant_1.ErrorCode.CollNameError);\r\n        }\r\n        return true;\r\n    }\r\n    static isDocID(docId) {\r\n        if (!/^([a-fA-F0-9]){24}$/.test(docId)) {\r\n            throw new Error(constant_1.ErrorCode.DocIDError);\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.Validate = Validate;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[\"DocIDError\"] = \"\\u6587\\u6863ID\\u4E0D\\u5408\\u6CD5\";\r\n    ErrorCode[\"CollNameError\"] = \"\\u96C6\\u5408\\u540D\\u79F0\\u4E0D\\u5408\\u6CD5\";\r\n    ErrorCode[\"OpStrError\"] = \"\\u64CD\\u4F5C\\u7B26\\u4E0D\\u5408\\u6CD5\";\r\n    ErrorCode[\"DirectionError\"] = \"\\u6392\\u5E8F\\u5B57\\u7B26\\u4E0D\\u5408\\u6CD5\";\r\n    ErrorCode[\"IntergerError\"] = \"must be integer\";\r\n})(ErrorCode || (ErrorCode = {}));\r\nexports.ErrorCode = ErrorCode;\r\nconst FieldType = {\r\n    String: \"String\",\r\n    Number: \"Number\",\r\n    Object: \"Object\",\r\n    Array: \"Array\",\r\n    Boolean: \"Boolean\",\r\n    Null: \"Null\",\r\n    GeoPoint: \"GeoPoint\",\r\n    Timestamp: \"Date\",\r\n    Command: \"Command\",\r\n    ServerDate: \"ServerDate\"\r\n};\r\nexports.FieldType = FieldType;\r\nconst OrderDirectionList = [\"desc\", \"asc\"];\r\nexports.OrderDirectionList = OrderDirectionList;\r\nconst WhereFilterOpList = [\"<\", \"<=\", \"==\", \">=\", \">\"];\r\nexports.WhereFilterOpList = WhereFilterOpList;\r\nvar Opeartor;\r\n(function (Opeartor) {\r\n    Opeartor[\"lt\"] = \"<\";\r\n    Opeartor[\"gt\"] = \">\";\r\n    Opeartor[\"lte\"] = \"<=\";\r\n    Opeartor[\"gte\"] = \">=\";\r\n    Opeartor[\"eq\"] = \"==\";\r\n})(Opeartor || (Opeartor = {}));\r\nexports.Opeartor = Opeartor;\r\nconst OperatorMap = {\r\n    [Opeartor.eq]: \"$eq\",\r\n    [Opeartor.lt]: \"$lt\",\r\n    [Opeartor.lte]: \"$lte\",\r\n    [Opeartor.gt]: \"$gt\",\r\n    [Opeartor.gte]: \"$gte\"\r\n};\r\nexports.OperatorMap = OperatorMap;\r\nconst UpdateOperatorList = [\r\n    \"$set\",\r\n    \"$inc\",\r\n    \"$mul\",\r\n    \"$unset\",\r\n    \"$push\",\r\n    \"$pop\",\r\n    \"$unshift\",\r\n    \"$shift\",\r\n    \"$currentDate\",\r\n    \"$each\",\r\n    \"$position\"\r\n];\r\nexports.UpdateOperatorList = UpdateOperatorList;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst constant_1 = require(\"./constant\");\r\nconst point_1 = require(\"./geo/point\");\r\nconst command_1 = require(\"./command\");\r\nconst deepAssign = require(\"deep-assign\");\r\nconst serverDate_1 = require(\"./serverDate\");\r\nclass Util {\r\n}\r\nUtil.encodeGeoPoint = (point) => {\r\n    if (!(point instanceof point_1.Point)) {\r\n        throw new Error(\"encodeGeoPoint: must be GeoPoint type\");\r\n    }\r\n    return {\r\n        type: \"Point\",\r\n        coordinates: [point.longitude, point.latitude]\r\n    };\r\n};\r\nUtil.encodeServerDate = (serverDate) => {\r\n    return { $date: { offset: serverDate.offset } };\r\n};\r\nUtil.encodeTimestamp = (stamp) => {\r\n    if (!(stamp instanceof Date)) {\r\n        throw new Error(\"encodeTimestamp: must be Date type\");\r\n    }\r\n    return {\r\n        $date: stamp.getTime()\r\n    };\r\n};\r\nUtil.encodeDocumentDataForReq = (document, merge = false, concatKey = true) => {\r\n    const keys = Object.keys(document);\r\n    let params = {};\r\n    if (Array.isArray(document)) {\r\n        params = [];\r\n    }\r\n    const getCommandVal = (obj) => {\r\n        let res = {};\r\n        let command = new command_1.Command();\r\n        command.concatKeys(obj, '', res);\r\n        for (let key in res) {\r\n            if (res[key] instanceof command_1.Command) {\r\n                res[key] = res[key].parse(key);\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    keys.forEach(key => {\r\n        const item = document[key];\r\n        const type = Util.whichType(item);\r\n        let realValue;\r\n        if (type === constant_1.FieldType.GeoPoint) {\r\n            realValue = { [key]: Util.encodeGeoPoint(item) };\r\n        }\r\n        else if (type === constant_1.FieldType.Timestamp) {\r\n            realValue = { [key]: Util.encodeTimestamp(item) };\r\n        }\r\n        else if (type === constant_1.FieldType.ServerDate) {\r\n            realValue = { [key]: Util.encodeServerDate(item) };\r\n        }\r\n        else if (type === constant_1.FieldType.Object) {\r\n            if (concatKey) {\r\n                realValue = getCommandVal({ [key]: item });\r\n            }\r\n            else {\r\n                realValue = { [key]: Util.encodeDocumentDataForReq(item, merge, concatKey) };\r\n            }\r\n        }\r\n        else if (type === constant_1.FieldType.Command) {\r\n            realValue = item.parse(key);\r\n        }\r\n        else {\r\n            realValue = { [key]: item };\r\n        }\r\n        if (constant_1.UpdateOperatorList.indexOf(Object.keys(realValue)[0]) === -1 && merge === true) {\r\n            realValue = { $set: realValue };\r\n        }\r\n        if (Array.isArray(params)) {\r\n            params.push(realValue);\r\n        }\r\n        else {\r\n            params = deepAssign({}, params, realValue);\r\n        }\r\n    });\r\n    if (params.$set) {\r\n        for (let concatKey in params.$set) {\r\n            for (let key in params.$set[concatKey]) {\r\n                if (constant_1.UpdateOperatorList.indexOf(key) > -1) {\r\n                    if (params[key] === undefined) {\r\n                        params[key] = Object.assign({}, params.$set[concatKey][key]);\r\n                    }\r\n                    else {\r\n                        params[key] = Object.assign({}, params[key], params.$set[concatKey][key]);\r\n                    }\r\n                    delete params.$set[concatKey];\r\n                }\r\n            }\r\n        }\r\n        if (Object.keys(params.$set).length === 0) {\r\n            delete params.$set;\r\n        }\r\n    }\r\n    return params;\r\n};\r\nUtil.formatResDocumentData = (documents) => {\r\n    return documents.map(document => {\r\n        return Util.formatField(document);\r\n    });\r\n};\r\nUtil.formatField = document => {\r\n    const keys = Object.keys(document);\r\n    let protoField = {};\r\n    if (Array.isArray(document)) {\r\n        protoField = [];\r\n    }\r\n    keys.forEach(key => {\r\n        const item = document[key];\r\n        const type = Util.whichType(item);\r\n        let realValue;\r\n        switch (type) {\r\n            case constant_1.FieldType.GeoPoint:\r\n                realValue = new point_1.Point(item.coordinates[0], item.coordinates[1]);\r\n                break;\r\n            case constant_1.FieldType.Timestamp:\r\n                realValue = new Date(item.$date);\r\n                break;\r\n            case constant_1.FieldType.Object:\r\n            case constant_1.FieldType.Array:\r\n                realValue = Util.formatField(item);\r\n                break;\r\n            case constant_1.FieldType.ServerDate:\r\n                realValue = new Date(item.$date);\r\n                break;\r\n            default:\r\n                realValue = item;\r\n        }\r\n        if (Array.isArray(protoField)) {\r\n            protoField.push(realValue);\r\n        }\r\n        else {\r\n            protoField[key] = realValue;\r\n        }\r\n    });\r\n    return protoField;\r\n};\r\nUtil.whichType = (obj) => {\r\n    let type = Object.prototype.toString.call(obj).slice(8, -1);\r\n    if (type === constant_1.FieldType.Object) {\r\n        if (obj instanceof point_1.Point) {\r\n            return constant_1.FieldType.GeoPoint;\r\n        }\r\n        else if (obj instanceof Date) {\r\n            return constant_1.FieldType.Timestamp;\r\n        }\r\n        else if (obj instanceof command_1.Command) {\r\n            return constant_1.FieldType.Command;\r\n        }\r\n        else if (obj instanceof serverDate_1.ServerDate) {\r\n            return constant_1.FieldType.ServerDate;\r\n        }\r\n        if (obj.$timestamp) {\r\n            type = constant_1.FieldType.Timestamp;\r\n        }\r\n        else if (obj.$date) {\r\n            type = constant_1.FieldType.ServerDate;\r\n        }\r\n        else if (Array.isArray(obj.coordinates) && obj.type === \"Point\") {\r\n            type = constant_1.FieldType.GeoPoint;\r\n        }\r\n    }\r\n    return type;\r\n};\r\nUtil.generateDocId = () => {\r\n    let chars = \"ABCDEFabcdef0123456789\";\r\n    let autoId = \"\";\r\n    for (let i = 0; i < 24; i++) {\r\n        autoId += chars.charAt(Math.floor(Math.random() * chars.length));\r\n    }\r\n    return autoId;\r\n};\r\nexports.Util = Util;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst regexp_1 = require(\"./regexp\");\r\nconst geo_1 = require(\"./geo\");\r\nclass Command {\r\n    constructor(logicParam) {\r\n        this.logicParam = {};\r\n        this.placeholder = \"{{{AAA}}}\";\r\n        this.toString = () => {\r\n            return this.logicParam[0];\r\n        };\r\n        if (logicParam) {\r\n            this.logicParam = logicParam;\r\n        }\r\n    }\r\n    eq(target) {\r\n        return new Command(this.baseOperate(\"$eq\", target));\r\n    }\r\n    neq(target) {\r\n        return new Command(this.baseOperate(\"$ne\", target));\r\n    }\r\n    gt(target) {\r\n        return new Command(this.baseOperate(\"$gt\", target));\r\n    }\r\n    gte(target) {\r\n        return new Command(this.baseOperate(\"$gte\", target));\r\n    }\r\n    lt(target) {\r\n        return new Command(this.baseOperate(\"$lt\", target));\r\n    }\r\n    lte(target) {\r\n        return new Command(this.baseOperate(\"$lte\", target));\r\n    }\r\n    in(target) {\r\n        return new Command(this.baseOperate(\"$in\", target));\r\n    }\r\n    nin(target) {\r\n        return new Command(this.baseOperate(\"$nin\", target));\r\n    }\r\n    regex(target) {\r\n        return regexp_1.RegExpConstructor({\r\n            regexp: target.regex,\r\n            options: target.options\r\n        });\r\n    }\r\n    mul(target) {\r\n        return new Command({ $mul: { [this.placeholder]: target } });\r\n    }\r\n    remove() {\r\n        return new Command({ $unset: { [this.placeholder]: \"\" } });\r\n    }\r\n    inc(target) {\r\n        return new Command({ $inc: { [this.placeholder]: target } });\r\n    }\r\n    set(target) {\r\n        return new Command({ $set: { [this.placeholder]: target } });\r\n    }\r\n    push(target) {\r\n        let value = target;\r\n        if (Array.isArray(target)) {\r\n            value = { $each: target };\r\n        }\r\n        return new Command({ $push: { [this.placeholder]: value } });\r\n    }\r\n    pop() {\r\n        return new Command({ $pop: { [this.placeholder]: 1 } });\r\n    }\r\n    unshift(target) {\r\n        let value = { $each: [target], $position: 0 };\r\n        if (Array.isArray(target)) {\r\n            value = { $each: target, $position: 0 };\r\n        }\r\n        return new Command({\r\n            $push: { [this.placeholder]: value }\r\n        });\r\n    }\r\n    shift() {\r\n        return new Command({ $pop: { [this.placeholder]: -1 } });\r\n    }\r\n    baseOperate(operator, target) {\r\n        if (target instanceof Date) {\r\n            return {\r\n                [this.placeholder]: {\r\n                    [operator]: {\r\n                        $date: target.getTime()\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        if (target instanceof geo_1.Point) {\r\n            return {\r\n                [this.placeholder]: {\r\n                    [operator]: {\r\n                        type: 'Point',\r\n                        coordinates: [target.longitude, target.latitude]\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        return {\r\n            [this.placeholder]: { [operator]: target }\r\n        };\r\n    }\r\n    and(...targets) {\r\n        if (targets.length === 1 && Array.isArray(targets[0])) {\r\n            targets = targets[0];\r\n        }\r\n        return new Command(this.connectOperate(\"$and\", targets));\r\n    }\r\n    or(...targets) {\r\n        if (targets.length === 1 && Array.isArray(targets[0])) {\r\n            targets = targets[0];\r\n        }\r\n        return new Command(this.connectOperate(\"$or\", targets));\r\n    }\r\n    connectOperate(operator, targets) {\r\n        let logicParams = [];\r\n        if (Object.keys(this.logicParam).length > 0) {\r\n            logicParams.push(this.logicParam);\r\n        }\r\n        for (let target of targets) {\r\n            if (target instanceof Command) {\r\n                if (Object.keys(target.logicParam).length === 0) {\r\n                    continue;\r\n                }\r\n                logicParams.push(target.logicParam);\r\n            }\r\n            else {\r\n                if (target instanceof regexp_1.RegExp) {\r\n                    logicParams.push({\r\n                        [this.placeholder]: {\r\n                            $regex: target.regexp,\r\n                            $options: target.options\r\n                        }\r\n                    });\r\n                    continue;\r\n                }\r\n                let tmp = {};\r\n                this.concatKeys(target, '', tmp);\r\n                let tmp1 = {};\r\n                for (let keys in tmp) {\r\n                    let value = tmp[keys];\r\n                    if (value instanceof Command) {\r\n                        Object.assign(tmp1, value.parse(keys));\r\n                    }\r\n                    else {\r\n                        Object.assign(tmp1, {\r\n                            [keys]: value\r\n                        });\r\n                    }\r\n                }\r\n                logicParams.push(tmp1);\r\n            }\r\n        }\r\n        this.logicParam = [];\r\n        return {\r\n            [operator]: logicParams\r\n        };\r\n    }\r\n    parse(key) {\r\n        return JSON.parse(JSON.stringify(this.logicParam).replace(/{{{AAA}}}/g, key));\r\n    }\r\n    concatKeys(obj, key, res) {\r\n        let keys, value;\r\n        for (let k in obj) {\r\n            if (typeof obj[k] === 'object' &&\r\n                obj[k] instanceof Command === false) {\r\n                keys = key ? key + '.' + k : k;\r\n                this.concatKeys(obj[k], keys, res);\r\n            }\r\n            else {\r\n                keys = key ? key + '.' + k : k;\r\n                value = obj[k];\r\n                Object.assign(res, { [keys]: value });\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Command = Command;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass RegExp {\r\n    constructor({ regexp, options }) {\r\n        if (!regexp) {\r\n            throw new TypeError(\"regexp must be a string\");\r\n        }\r\n        this.regexp = regexp;\r\n        this.options = options;\r\n    }\r\n    parse(key) {\r\n        return {\r\n            [key]: {\r\n                $regex: this.regexp,\r\n                $options: this.options\r\n            }\r\n        };\r\n    }\r\n}\r\nexports.RegExp = RegExp;\r\nfunction RegExpConstructor(param) {\r\n    return new RegExp(param);\r\n}\r\nexports.RegExpConstructor = RegExpConstructor;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ServerDate {\r\n    constructor({ offset }) {\r\n        this.offset = offset;\r\n    }\r\n}\r\nexports.ServerDate = ServerDate;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst document_1 = require(\"./document\");\r\nconst query_1 = require(\"./query\");\r\nclass CollectionReference extends query_1.Query {\r\n    constructor(db, coll) {\r\n        super(db, coll);\r\n    }\r\n    get name() {\r\n        return this._coll;\r\n    }\r\n    doc(docID) {\r\n        return new document_1.DocumentReference(this._db, this._coll, docID);\r\n    }\r\n    add(data) {\r\n        let docRef = this.doc();\r\n        return docRef.create(data);\r\n    }\r\n}\r\nexports.CollectionReference = CollectionReference;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst request_1 = require(\"./request\");\r\nconst util_1 = require(\"./util\");\r\nconst command_1 = require(\"./command\");\r\nclass DocumentReference {\r\n    constructor(db, coll, docID, projection = {}) {\r\n        this._db = db;\r\n        this._coll = coll;\r\n        this.id = docID;\r\n        this.request = new request_1.Request(this._db);\r\n        this.projection = projection;\r\n    }\r\n    create(data) {\r\n        let params = {\r\n            collectionName: this._coll,\r\n            data: util_1.Util.encodeDocumentDataForReq(data, false, false)\r\n        };\r\n        if (this.id) {\r\n            params[\"_id\"] = this.id;\r\n        }\r\n        return new Promise(resolve => {\r\n            this.request.send(\"addDocument\", params).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                resolve({\r\n                    id: res.data._id,\r\n                    requestId: res.requestId\r\n                });\r\n            });\r\n        });\r\n    }\r\n    set(data) {\r\n        if (!data || typeof data !== \"object\") {\r\n            return Promise.resolve({\r\n                code: 'INVALID_PARAM',\r\n                message: '参数必需是非空对象'\r\n            });\r\n        }\r\n        if (data.hasOwnProperty('_id')) {\r\n            return Promise.resolve({\r\n                code: 'INVALID_PARAM',\r\n                message: '不能更新_id的值'\r\n            });\r\n        }\r\n        let hasOperator = false;\r\n        const checkMixed = (objs) => {\r\n            if (typeof objs === 'object') {\r\n                for (let key in objs) {\r\n                    if (objs[key] instanceof command_1.Command) {\r\n                        hasOperator = true;\r\n                    }\r\n                    else if (typeof objs[key] === 'object') {\r\n                        checkMixed(objs[key]);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        checkMixed(data);\r\n        if (hasOperator) {\r\n            return Promise.resolve({\r\n                code: 'DATABASE_REQUEST_FAILED',\r\n                message: 'update operator complicit'\r\n            });\r\n        }\r\n        const merge = false;\r\n        let param = {\r\n            collectionName: this._coll,\r\n            data: util_1.Util.encodeDocumentDataForReq(data, merge, false),\r\n            multi: false,\r\n            merge,\r\n            upsert: true\r\n        };\r\n        if (this.id) {\r\n            param[\"query\"] = { _id: this.id };\r\n        }\r\n        return new Promise(resolve => {\r\n            this.request.send(\"updateDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        updated: res.data.updated,\r\n                        upsertedId: res.data.upserted_id,\r\n                        requestId: res.requestId\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    update(data) {\r\n        if (!data || typeof data !== \"object\") {\r\n            return Promise.resolve({\r\n                code: 'INVALID_PARAM',\r\n                message: '参数必需是非空对象'\r\n            });\r\n        }\r\n        if (data.hasOwnProperty('_id')) {\r\n            return Promise.resolve({\r\n                code: 'INVALID_PARAM',\r\n                message: '不能更新_id的值'\r\n            });\r\n        }\r\n        const query = { _id: this.id };\r\n        const merge = true;\r\n        const param = {\r\n            collectionName: this._coll,\r\n            data: util_1.Util.encodeDocumentDataForReq(data, merge, true),\r\n            query: query,\r\n            multi: false,\r\n            merge,\r\n            upsert: false\r\n        };\r\n        return new Promise(resolve => {\r\n            this.request.send(\"updateDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        updated: res.data.updated,\r\n                        upsertedId: res.data.upserted_id,\r\n                        requestId: res.requestId\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    remove() {\r\n        const query = { _id: this.id };\r\n        const param = {\r\n            collectionName: this._coll,\r\n            query: query,\r\n            multi: false\r\n        };\r\n        return new Promise(resolve => {\r\n            this.request.send(\"deleteDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        deleted: res.data.deleted,\r\n                        requestId: res.requestId\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    get() {\r\n        const query = { _id: this.id };\r\n        const param = {\r\n            collectionName: this._coll,\r\n            query: query,\r\n            multi: false,\r\n            projection: this.projection\r\n        };\r\n        return new Promise(resolve => {\r\n            this.request.send(\"queryDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    const documents = util_1.Util.formatResDocumentData(res.data.list);\r\n                    resolve({\r\n                        data: documents,\r\n                        requestId: res.requestId,\r\n                        total: res.TotalCount,\r\n                        limit: res.Limit,\r\n                        offset: res.Offset\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    field(projection) {\r\n        for (let k in projection) {\r\n            if (projection[k]) {\r\n                projection[k] = 1;\r\n            }\r\n            else {\r\n                projection[k] = 0;\r\n            }\r\n        }\r\n        return new DocumentReference(this._db, this._coll, this.id, projection);\r\n    }\r\n}\r\nexports.DocumentReference = DocumentReference;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst requestHandler = require(\"../utils/httpRequest\");\r\nclass Request {\r\n    constructor(db) {\r\n        this.db = db;\r\n    }\r\n    send(api, data) {\r\n        const params = Object.assign({}, data, {\r\n            action: `database.${api}`\r\n        });\r\n        return requestHandler({\r\n            config: this.db.config.config,\r\n            params,\r\n            method: \"post\",\r\n            headers: {\r\n                \"content-type\": \"application/json\"\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.Request = Request;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst request_1 = require(\"./request\");\r\nconst validate_1 = require(\"./validate\");\r\nconst util_1 = require(\"./util\");\r\nconst command_1 = require(\"./command\");\r\nconst regexp_1 = require(\"./regexp\");\r\nconst isRegExp = require(\"is-regex\");\r\nconst geo_1 = require(\"./geo\");\r\nclass Query {\r\n    constructor(db, coll, fieldFilters, fieldOrders, queryOptions) {\r\n        this._db = db;\r\n        this._coll = coll;\r\n        this._fieldFilters = fieldFilters;\r\n        this._fieldOrders = fieldOrders || [];\r\n        this._queryOptions = queryOptions || {};\r\n        this._request = new request_1.Request(this._db);\r\n    }\r\n    get() {\r\n        let newOder = [];\r\n        if (this._fieldOrders) {\r\n            this._fieldOrders.forEach(order => {\r\n                newOder.push(order);\r\n            });\r\n        }\r\n        let param = {\r\n            collectionName: this._coll\r\n        };\r\n        if (this._fieldFilters) {\r\n            param.query = this._fieldFilters;\r\n        }\r\n        if (newOder.length > 0) {\r\n            param.order = newOder;\r\n        }\r\n        if (this._queryOptions.offset) {\r\n            param.offset = this._queryOptions.offset;\r\n        }\r\n        if (this._queryOptions.limit) {\r\n            param.limit =\r\n                this._queryOptions.limit < 100 ? this._queryOptions.limit : 100;\r\n        }\r\n        else {\r\n            param.limit = 100;\r\n        }\r\n        if (this._queryOptions.projection) {\r\n            param.projection = this._queryOptions.projection;\r\n        }\r\n        return new Promise(resolve => {\r\n            this._request.send(\"queryDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    const documents = util_1.Util.formatResDocumentData(res.data.list);\r\n                    const result = {\r\n                        data: documents,\r\n                        requestId: res.requestId\r\n                    };\r\n                    if (res.TotalCount)\r\n                        result.total = res.TotalCount;\r\n                    if (res.Limit)\r\n                        result.limit = res.Limit;\r\n                    if (res.Offset)\r\n                        result.offset = res.Offset;\r\n                    resolve(result);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    count() {\r\n        let param = {\r\n            collectionName: this._coll\r\n        };\r\n        if (this._fieldFilters) {\r\n            param.query = this._fieldFilters;\r\n        }\r\n        return new Promise(resolve => {\r\n            this._request.send(\"countDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        requestId: res.requestId,\r\n                        total: res.data.total\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    where(query) {\r\n        return new Query(this._db, this._coll, this.convertParams(query), this._fieldOrders, this._queryOptions);\r\n    }\r\n    orderBy(fieldPath, directionStr) {\r\n        validate_1.Validate.isFieldPath(fieldPath);\r\n        validate_1.Validate.isFieldOrder(directionStr);\r\n        const newOrder = {\r\n            field: fieldPath,\r\n            direction: directionStr\r\n        };\r\n        const combinedOrders = this._fieldOrders.concat(newOrder);\r\n        return new Query(this._db, this._coll, this._fieldFilters, combinedOrders, this._queryOptions);\r\n    }\r\n    limit(limit) {\r\n        validate_1.Validate.isInteger(\"limit\", limit);\r\n        let option = Object.assign({}, this._queryOptions);\r\n        option.limit = limit;\r\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\r\n    }\r\n    skip(offset) {\r\n        validate_1.Validate.isInteger(\"offset\", offset);\r\n        let option = Object.assign({}, this._queryOptions);\r\n        option.offset = offset;\r\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\r\n    }\r\n    update(data) {\r\n        if (!data || typeof data !== \"object\") {\r\n            return Promise.resolve({\r\n                code: \"INVALID_PARAM\",\r\n                message: \"参数必需是非空对象\"\r\n            });\r\n        }\r\n        if (data.hasOwnProperty(\"_id\")) {\r\n            return Promise.resolve({\r\n                code: \"INVALID_PARAM\",\r\n                message: \"不能更新_id的值\"\r\n            });\r\n        }\r\n        let param = {\r\n            collectionName: this._coll,\r\n            query: this._fieldFilters,\r\n            multi: true,\r\n            merge: true,\r\n            upsert: false,\r\n            data: util_1.Util.encodeDocumentDataForReq(data, true)\r\n        };\r\n        return new Promise(resolve => {\r\n            this._request.send(\"updateDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        requestId: res.requestId,\r\n                        updated: res.data.updated,\r\n                        upsertId: res.data.upsert_id\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    field(projection) {\r\n        for (let k in projection) {\r\n            if (projection[k]) {\r\n                projection[k] = 1;\r\n            }\r\n            else {\r\n                projection[k] = 0;\r\n            }\r\n        }\r\n        let option = Object.assign({}, this._queryOptions);\r\n        option.projection = projection;\r\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\r\n    }\r\n    remove() {\r\n        const param = {\r\n            collectionName: this._coll,\r\n            query: this._fieldFilters,\r\n            multi: true\r\n        };\r\n        return new Promise(resolve => {\r\n            this._request.send(\"deleteDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        requestId: res.requestId,\r\n                        deleted: res.data.deleted\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    convertParams(query) {\r\n        let queryParam = {};\r\n        if (query instanceof command_1.Command) {\r\n            queryParam = query.parse();\r\n        }\r\n        else {\r\n            for (let key in query) {\r\n                if (query[key] instanceof command_1.Command || query[key] instanceof regexp_1.RegExp || query[key] instanceof geo_1.Point) {\r\n                    queryParam = Object.assign({}, queryParam, query[key].parse(key));\r\n                }\r\n                else if (isRegExp(query[key])) {\r\n                    queryParam = {\r\n                        [key]: {\r\n                            $regex: query[key].source,\r\n                            $options: query[key].flags\r\n                        }\r\n                    };\r\n                }\r\n                else if (typeof query[key] === \"object\") {\r\n                    let command = new command_1.Command();\r\n                    let tmp = {};\r\n                    command.concatKeys({ [key]: query[key] }, \"\", tmp);\r\n                    let keys = Object.keys(tmp)[0];\r\n                    let value = tmp[keys];\r\n                    if (value instanceof command_1.Command) {\r\n                        value = value.parse(keys);\r\n                    }\r\n                    else {\r\n                        value = { [keys]: value };\r\n                    }\r\n                    queryParam = Object.assign({}, queryParam, value);\r\n                }\r\n                else {\r\n                    queryParam = Object.assign({}, queryParam, { [key]: query[key] });\r\n                }\r\n            }\r\n        }\r\n        return queryParam;\r\n    }\r\n}\r\nexports.Query = Query;\r\n","const httpRequest = require(\"../utils/httpRequest\");\r\n\r\n/**\r\n * 调用云函数\r\n * @param {String} name  函数名\r\n * @param {Object} functionParam 函数参数\r\n * @return {Promise}\r\n */\r\nfunction callFunction({ name, data }) {\r\n  try {\r\n    data = data ? JSON.stringify(data) : \"\";\r\n  } catch (e) {\r\n    return Promise.reject(e);\r\n  }\r\n  if (!name) {\r\n    return Promise.reject(\r\n      new Error({\r\n        message: \"函数名不能为空\"\r\n      })\r\n    );\r\n  }\r\n\r\n  let params = {\r\n    action: \"functions.invokeFunction\",\r\n    function_name: name,\r\n    request_data: data\r\n  };\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: \"post\",\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  }).then(res => {\r\n    // console.log(res);\r\n    if (res.code) {\r\n      return res;\r\n    } else {\r\n      let result = res.data.response_data\r\n      try {\r\n        result = JSON.parse(res.data.response_data)\r\n      } catch (e) { }\r\n      return {\r\n        result,\r\n        requestId: res.requestId\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nexports.callFunction = callFunction;\r\n","const httpRequest = require(\"../utils/httpRequest\");\r\n\r\nexports.callWxOpenApi = function ({ apiName, requestData } = {}) {\r\n    try {\r\n        requestData = requestData ? JSON.stringify(requestData) : \"\";\r\n    } catch (e) {\r\n        throw Error(e)\r\n    }\r\n\r\n    const wxCloudApiToken = process.env.WX_API_TOKEN || ''\r\n\r\n    let params = {\r\n        action: \"wx.api\",\r\n        apiName,\r\n        requestData,\r\n        wxCloudApiToken\r\n    };\r\n\r\n    return httpRequest({\r\n        config: this.config,\r\n        params,\r\n        method: \"post\",\r\n        headers: {\r\n            \"content-type\": \"application/json\"\r\n        }\r\n    }).then(res => {\r\n        // console.log(res);\r\n        if (res.code) {\r\n            return res;\r\n        } else {\r\n            let result = res.data.responseData\r\n            try {\r\n                result = JSON.parse(res.data.responseData)\r\n            } catch (e) { }\r\n            return {\r\n                result,\r\n                requestId: res.requestId\r\n            };\r\n        }\r\n    });\r\n}\r\n"]}