{"version":3,"sources":["index.js","src\\storage\\index.js","src\\utils\\httpRequest.js","src\\utils\\auth.js","src\\db\\index.js","src\\db\\db.js","src\\db\\geo\\index.js","src\\db\\geo\\point.js","src\\db\\validate.js","src\\db\\constant.js","src\\db\\util.js","src\\db\\command.js","src\\db\\regexp.js","src\\db\\serverDate\\index.js","src\\db\\collection.js","src\\db\\document.js","src\\db\\request.js","src\\db\\query.js","src\\functions\\index.js","src\\wx\\index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AKfA,ADGA,AHSA,AENA,ADGA;AFOA,AKfA,ADGA,AHSA,AENA,ADGA;AFOA,AKfA,ADGA,AHSA,AENA,ADGA;AFOA,AKfA,ACHA,AFMA,AHSA,AENA,ADGA;AFOA,AKfA,ACHA,ALeA,AENA,ADGA;AFOA,AKfA,ACHA,ALeA,AENA,ADGA;AFOA,AKfA,ACHA,ACHA,ANkBA,AENA,ADGA;AFOA,AKfA,ACHA,ACHA,ANkBA,AENA,ADGA;AFOA,AKfA,ACHA,ACHA,ANkBA,AENA,ADGA;AFOA,AKfA,ACHA,ACHA,ACHA,APqBA,AENA,ADGA;AFOA,AKfA,AENA,ACHA,APqBA,AENA,ADGA;AFOA,AKfA,AENA,ACHA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,ACHA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,ACHA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,ACHA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AS3BA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AGTA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,AFMA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,AFMA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,AFMA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,AWjCA,AFMA,AJYA,AENA,AKfA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AOrBA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AOrBA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AOrBA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AU9BA,AHSA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AU9BA,AHSA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AU9BA,AHSA,ACHA,AHSA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AJYA,AU9BA,AHSA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,APqBA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA;AFOA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ALeA,AIZA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,Ac1CA,AHSA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,ADGA,ANkBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AFMA,AU9BA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AFMA,AMlBA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;AnB0DA,AWjCA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA,AiBnDA;ARyBA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AQxBA,AjBmDA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA,ADGA;AS1BA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA,AENA;AQvBA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,APqBA,AT2BA;AU7BA,AIZA,AENA,AhBgDA;AU7BA,AIZA,AENA,AhBgDA;AczCA,AENA,AhBgDA;AczCA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const storage = require(\"./src/storage\");\nconst database = require(\"./src/db\").Db;\nconst functions = require(\"./src/functions\");\nconst wx = require(\"./src/wx\");\n\nfunction Tcb(config) {\n  // console.log(config)\n  this.config = config ? config : this.config\n}\n\nTcb.prototype.init = function ({\n  secretId,\n  secretKey,\n  sessionToken,\n  env,\n  proxy\n} = {}) {\n  if ((secretId && !secretKey) || (!secretId && secretKey)) {\n    throw Error(\"secretId and secretKey must be a pair\");\n  }\n\n  this.config = {\n    get secretId() {\n      return this._secretId\n        ? this._secretId\n        : process.env.TENCENTCLOUD_SECRETID;\n    },\n    set secretId(id) {\n      this._secretId = id;\n    },\n    get secretKey() {\n      return this._secretKey\n        ? this._secretKey\n        : process.env.TENCENTCLOUD_SECRETKEY;\n    },\n    set secretKey(key) {\n      this._secretKey = key;\n    },\n    get sessionToken() {\n      if (this._sessionToken === undefined) {\n        //默认临时密钥\n        return process.env.TENCENTCLOUD_SESSIONTOKEN;\n      } else if (this._sessionToken === false) {\n        //固定秘钥\n        return undefined;\n      } else {\n        //传入的临时密钥\n        return this._sessionToken;\n      }\n    },\n    set sessionToken(token) {\n      this._sessionToken = token;\n    },\n    envName: env,\n    proxy: proxy\n  };\n\n  this.config.secretId = secretId;\n  this.config.secretKey = secretKey;\n  this.config.sessionToken = sessionToken ? sessionToken : (secretId && secretKey ? false : undefined);\n\n  return new Tcb(this.config);\n};\n\nTcb.prototype.database = function () {\n  return new database(this);\n};\n\nfunction each(obj, fn) {\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      fn(obj[i], i);\n    }\n  }\n}\n\nfunction extend(target, source) {\n  each(source, function (val, key) {\n    target[key] = source[key];\n  });\n  return target;\n}\n\nextend(Tcb.prototype, functions);\nextend(Tcb.prototype, storage);\nextend(Tcb.prototype, wx)\n\nmodule.exports = new Tcb();\n","const request = require(\"request\");\nconst fs = require('fs');\nconst httpRequest = require(\"../utils/httpRequest\");\n\n/*\n * 上传文件\n * @param {string} cloudPath 上传后的文件路径\n * @param {fs.ReadStream} fileContent  上传文件的二进制流\n */\nfunction uploadFile({ cloudPath, fileContent }, { onResponseReceived } = {}) {\n  let params = {\n    action: \"storage.uploadFile\",\n    path: cloudPath,\n    file: fileContent\n  };\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: \"post\",\n    headers: {\n      // \"content-type\": \"multipart/form-data\"\n    },\n    callback: (response) => {\n      onResponseReceived && typeof onResponseReceived === 'function' && onResponseReceived(response)\n    }\n  }).then((res) => {\n    if (res.code) {\n      return res;\n    } else {\n      return {\n        fileID: res.data.fileID,\n        requestId: res.requestId\n      };\n    }\n  });\n}\n\n/**\n * 删除文件\n * @param {Array.<string>} fileList 文件id数组\n */\nasync function deleteFile({ fileList }) {\n  if (!fileList || !Array.isArray(fileList)) {\n    return {\n      code: \"INVALID_PARAM\",\n      message: \"fileList必须是非空的数组\"\n    };\n  }\n\n  for (let file of fileList) {\n    if (!file || typeof file != \"string\") {\n      return {\n        code: \"INVALID_PARAM\",\n        message: \"fileList的元素必须是非空的字符串\"\n      };\n    }\n  }\n\n  let params = {\n    action: \"storage.batchDeleteFile\",\n    fileid_list: fileList\n  };\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: \"post\",\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }).then(res => {\n    if (res.code) {\n      return res;\n    } else {\n      return {\n        fileList: res.data.delete_list,\n        requestId: res.requestId\n      };\n    }\n  });\n}\n\n/**\n * 获取文件下载链接\n * @param {Array.<Object>} fileList\n */\nasync function getTempFileURL({ fileList }) {\n  if (!fileList || !Array.isArray(fileList)) {\n    return {\n      code: \"INVALID_PARAM\",\n      message: \"fileList必须是非空的数组\"\n    };\n  }\n\n  let file_list = [];\n  for (let file of fileList) {\n    if (typeof file === 'object') {\n      if (\n        !file.hasOwnProperty(\"fileID\") ||\n        !file.hasOwnProperty(\"maxAge\")\n      ) {\n        return {\n          code: \"INVALID_PARAM\",\n          message: \"fileList的元素必须是包含fileID和maxAge的对象\"\n        };\n      }\n\n      file_list.push({\n        fileid: file.fileID,\n        max_age: file.maxAge\n      });\n    } else if (typeof file === 'string') {\n      file_list.push({\n        fileid: file,\n      });\n    } else {\n      return {\n        code: \"INVALID_PARAM\",\n        message: \"fileList的元素必须是字符串\"\n      };\n    }\n  }\n\n  let params = {\n    action: \"storage.batchGetDownloadUrl\",\n    file_list\n  };\n  // console.log(params);\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: \"post\",\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }).then(res => {\n    // console.log(res);\n    if (res.code) {\n      return res;\n    } else {\n      return {\n        fileList: res.data.download_list,\n        requestId: res.requestId\n      };\n    }\n  });\n}\n\nasync function downloadFile({ fileID, tempFilePath }) {\n  let tmpUrl,\n    self = this;\n  try {\n    const tmpUrlRes = await this.getTempFileURL({\n      fileList: [\n        {\n          fileID,\n          maxAge: 600\n        }\n      ]\n    });\n    // console.log(tmpUrlRes);\n    const res = tmpUrlRes.fileList[0]\n\n    if (\n      res.code != 'SUCCESS'\n    ) {\n      return res;\n    }\n\n    tmpUrl = res.tempFileURL;\n  } catch (e) {\n    throw e\n  }\n\n  let req = request({\n    url: tmpUrl,\n    encoding: null,\n    proxy: self.config.proxy\n  });\n\n  return new Promise((resolve, reject) => {\n    let fileContent = Buffer.alloc(0)\n    req.on('response', function (response) {\n      if (response && +response.statusCode === 200) {\n        if (tempFilePath) {\n          response.pipe(fs.createWriteStream(tempFilePath));\n        } else {\n          response.on('data', (data) => {\n            fileContent = Buffer.concat([fileContent, data])\n          })\n        }\n        response.on('end', () => {\n          resolve({\n            fileContent: tempFilePath ? undefined : fileContent,\n            message: '文件下载完成'\n          })\n        })\n      } else {\n        reject(response)\n      }\n    });\n  });\n}\n\nexports.uploadFile = uploadFile;\nexports.deleteFile = deleteFile;\nexports.getTempFileURL = getTempFileURL;\nexports.downloadFile = downloadFile;\n","var request = require(\"request\");\nvar auth = require(\"./auth.js\");\n\nmodule.exports = function (args) {\n  var config = args.config,\n    params = args.params,\n    method = args.method || \"get\";\n\n  const eventId = (new Date()).valueOf() + '_' + Math.random().toString().substr(2,5)\n\n  params = Object.assign({}, params, {\n    envName: config.envName,\n    timestamp: new Date().valueOf(),\n    eventId\n  });\n\n  for (let key in params) {\n    if (params[key] === undefined) {\n      delete params[key];\n    }\n  }\n\n  let file = null;\n  if (params.action === \"storage.uploadFile\") {\n    file = params[\"file\"];\n    delete params[\"file\"];\n  }\n\n  if (!config.secretId || !config.secretKey) {\n    if (process.env.TENCENTCLOUD_RUNENV === 'SCF') {\n      throw Error(\"missing authoration key, redeploy the function\")\n    }\n    throw Error(\"missing secretId or secretKey of tencent cloud\");\n  }\n\n  const authObj = {\n    SecretId: config.secretId,\n    SecretKey: config.secretKey,\n    Method: method,\n    pathname: \"/admin\",\n    Query: params,\n    Headers: Object.assign(\n      {\n        \"user-agent\": \"tcb-admin-sdk\"\n      },\n      args.headers || {}\n    )\n  };\n\n  var authorization = auth.getAuth(authObj);\n\n  params.authorization = authorization;\n  file && (params.file = file);\n  config.sessionToken && (params.sessionToken = config.sessionToken);\n\n  // console.log(params);\n  var opts = {\n    // url: 'http://localhost:8002/admin',\n    url: \"http://tcb-admin.tencentcloudapi.com/admin\",\n    method: args.method || \"get\",\n    timeout: args.timeout || 50000,\n    headers: authObj.Headers,\n    proxy: config.proxy\n  };\n\n  if (params.action === \"storage.uploadFile\") {\n    opts.formData = params;\n    opts.formData.file = {\n      value: params.file,\n      options: {\n        filename: params.path\n      }\n    };\n  } else if (args.method == \"post\") {\n    opts.body = params;\n    opts.json = true;\n  } else {\n    opts.qs = params;\n  }\n\n  if (params.action === 'wx.api') {\n    opts.url = 'https://tcb-open.tencentcloudapi.com/admin'\n  }\n\n  if (args.proxy) {\n    opts.proxy = args.proxy;\n  }\n\n  opts.url = `${opts.url}?eventId=${eventId}`\n\n  // console.log(JSON.stringify(opts));\n  return new Promise(function (resolve, reject) {\n    request(opts, function (err, response, body) {\n      // console.log(err, body);\n      args && args.callback && args.callback(response)\n\n      if (err === null && response.statusCode == 200) {\n        let res;\n        try {\n          res = typeof body === \"string\" ? JSON.parse(body) : body;\n        } catch (e) {\n          res = body;\n        }\n        return resolve(res);\n      } else {\n        return reject(err);\n      }\n    });\n  });\n};\n","var crypto = require(\"crypto\");\n\nfunction camSafeUrlEncode(str) {\n  return encodeURIComponent(str)\n    .replace(/!/g, \"%21\")\n    .replace(/'/g, \"%27\")\n    .replace(/\\(/g, \"%28\")\n    .replace(/\\)/g, \"%29\")\n    .replace(/\\*/g, \"%2A\");\n}\nfunction map(obj, fn) {\n  var o = isArray(obj) ? [] : {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = fn(obj[i], i);\n    }\n  }\n  return o;\n}\nfunction isArray(arr) {\n  return arr instanceof Array;\n}\n\nfunction clone(obj) {\n  return map(obj, function(v) {\n    return typeof v === \"object\" && v !== undefined && v !== null\n      ? clone(v)\n      : v;\n  });\n}\n//测试用的key后面可以去掉\nvar getAuth = function(opt) {\n  //   console.log(opt);\n  opt = opt || {};\n\n  var SecretId = opt.SecretId;\n  var SecretKey = opt.SecretKey;\n  var method = (opt.method || opt.Method || \"get\").toLowerCase();\n  var pathname = opt.pathname || \"/\";\n  var queryParams = clone(opt.Query || opt.params || {});\n  var headers = clone(opt.Headers || opt.headers || {});\n  pathname.indexOf(\"/\") !== 0 && (pathname = \"/\" + pathname);\n\n  if (!SecretId) return console.error(\"missing param SecretId\");\n  if (!SecretKey) return console.error(\"missing param SecretKey\");\n\n  var getObjectKeys = function(obj) {\n    var list = [];\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        if (obj[key] === undefined) {\n          continue;\n        }\n        list.push(key);\n      }\n    }\n    return list.sort();\n  };\n\n  var obj2str = function(obj) {\n    var i, key, val;\n    var list = [];\n    var keyList = getObjectKeys(obj);\n    for (i = 0; i < keyList.length; i++) {\n      key = keyList[i];\n      if (obj[key] === undefined) {\n        continue;\n      }\n      val = obj[key] === null ? \"\" : obj[key];\n      if (typeof val !== \"string\") {\n        val = JSON.stringify(val);\n      }\n      key = key.toLowerCase();\n      key = camSafeUrlEncode(key);\n      val = camSafeUrlEncode(val) || \"\";\n      list.push(key + \"=\" + val);\n    }\n    return list.join(\"&\");\n  };\n\n  // 签名有效起止时间\n  var now = parseInt(new Date().getTime() / 1000) - 1;\n  var exp = now;\n\n  var Expires = opt.Expires || opt.expires;\n  if (Expires === undefined) {\n    exp += 900; // 签名过期时间为当前 + 900s\n  } else {\n    exp += Expires * 1 || 0;\n  }\n\n  // 要用到的 Authorization 参数列表\n  var qSignAlgorithm = \"sha1\";\n  var qAk = SecretId;\n  var qSignTime = now + \";\" + exp;\n  var qKeyTime = now + \";\" + exp;\n  var qHeaderList = getObjectKeys(headers)\n    .join(\";\")\n    .toLowerCase();\n  var qUrlParamList = getObjectKeys(queryParams)\n    .join(\";\")\n    .toLowerCase();\n\n  // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778\n  // 步骤一：计算 SignKey\n  var signKey = crypto\n    .createHmac(\"sha1\", SecretKey)\n    .update(qKeyTime)\n    .digest(\"hex\");\n\n  // console.log(\"queryParams\", queryParams);\n  // console.log(obj2str(queryParams));\n\n  // 步骤二：构成 FormatString\n  var formatString = [\n    method,\n    pathname,\n    obj2str(queryParams),\n    obj2str(headers),\n    \"\"\n  ].join(\"\\n\");\n\n  // console.log(formatString);\n  formatString = Buffer.from(formatString, \"utf8\");\n\n  // 步骤三：计算 StringToSign\n  var sha1Algo = crypto.createHash(\"sha1\");\n  sha1Algo.update(formatString);\n  var res = sha1Algo.digest(\"hex\");\n  var stringToSign = [\"sha1\", qSignTime, res, \"\"].join(\"\\n\");\n\n  // console.log(stringToSign);\n  // 步骤四：计算 Signature\n  var qSignature = crypto\n    .createHmac(\"sha1\", signKey)\n    .update(stringToSign)\n    .digest(\"hex\");\n\n  // 步骤五：构造 Authorization\n  var authorization = [\n    \"q-sign-algorithm=\" + qSignAlgorithm,\n    \"q-ak=\" + qAk,\n    \"q-sign-time=\" + qSignTime,\n    \"q-key-time=\" + qKeyTime,\n    \"q-header-list=\" + qHeaderList,\n    \"q-url-param-list=\" + qUrlParamList,\n    \"q-signature=\" + qSignature\n  ].join(\"&\");\n\n  return authorization;\n};\n\nexports.getAuth = getAuth;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./db\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Geo = require(\"./geo\");\nconst collection_1 = require(\"./collection\");\nconst command_1 = require(\"./command\");\nconst serverDate_1 = require(\"./serverDate\");\nconst request_1 = require(\"./request\");\nconst regexp_1 = require(\"./regexp\");\nclass Db {\n    constructor(config) {\n        this.config = config;\n        this.Geo = Geo;\n        this.command = new command_1.Command();\n        this.RegExp = regexp_1.RegExpConstructor;\n    }\n    serverDate({ offset = 0 } = {}) {\n        return new serverDate_1.ServerDate({ offset });\n    }\n    collection(collName) {\n        if (!collName) {\n            throw new Error(\"Collection name is required\");\n        }\n        return new collection_1.CollectionReference(this, collName);\n    }\n    createCollection(collName) {\n        let request = new request_1.Request(this);\n        const params = {\n            collectionName: collName\n        };\n        return request.send(\"addCollection\", params);\n    }\n}\nexports.Db = Db;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./point\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_1 = require(\"../validate\");\nclass Point {\n    constructor(longitude, latitude) {\n        validate_1.Validate.isGeopoint(\"longitude\", longitude);\n        validate_1.Validate.isGeopoint(\"latitude\", latitude);\n        this.longitude = longitude;\n        this.latitude = latitude;\n    }\n    parse(key) {\n        return {\n            [key]: {\n                type: 'Point',\n                coordinates: [this.longitude, this.latitude]\n            }\n        };\n    }\n}\nexports.Point = Point;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constant_1 = require(\"./constant\");\nconst util_1 = require(\"./util\");\nclass Validate {\n    static isGeopoint(point, degree) {\n        if (util_1.Util.whichType(degree) !== constant_1.FieldType.Number) {\n            throw new Error(\"Geo Point must be number type\");\n        }\n        const degreeAbs = Math.abs(degree);\n        if (point === \"latitude\" && degreeAbs > 90) {\n            throw new Error(\"latitude should be a number ranges from -90 to 90\");\n        }\n        else if (point === \"longitude\" && degreeAbs > 180) {\n            throw new Error(\"longitude should be a number ranges from -180 to 180\");\n        }\n        return true;\n    }\n    static isInteger(param, num) {\n        if (!Number.isInteger(num)) {\n            throw new Error(param + constant_1.ErrorCode.IntergerError);\n        }\n        return true;\n    }\n    static isFieldOrder(direction) {\n        if (constant_1.OrderDirectionList.indexOf(direction) === -1) {\n            throw new Error(constant_1.ErrorCode.DirectionError);\n        }\n        return true;\n    }\n    static isFieldPath(path) {\n        if (!/^[a-zA-Z0-9-_\\.]/.test(path)) {\n            throw new Error();\n        }\n        return true;\n    }\n    static isOperator(op) {\n        if (constant_1.WhereFilterOpList.indexOf(op) === -1) {\n            throw new Error(constant_1.ErrorCode.OpStrError);\n        }\n        return true;\n    }\n    static isCollName(name) {\n        if (!/^[a-zA-Z0-9]([a-zA-Z0-9-_]){1,32}$/.test(name)) {\n            throw new Error(constant_1.ErrorCode.CollNameError);\n        }\n        return true;\n    }\n    static isDocID(docId) {\n        if (!/^([a-fA-F0-9]){24}$/.test(docId)) {\n            throw new Error(constant_1.ErrorCode.DocIDError);\n        }\n        return true;\n    }\n}\nexports.Validate = Validate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[\"DocIDError\"] = \"\\u6587\\u6863ID\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"CollNameError\"] = \"\\u96C6\\u5408\\u540D\\u79F0\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"OpStrError\"] = \"\\u64CD\\u4F5C\\u7B26\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"DirectionError\"] = \"\\u6392\\u5E8F\\u5B57\\u7B26\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"IntergerError\"] = \"must be integer\";\n})(ErrorCode || (ErrorCode = {}));\nexports.ErrorCode = ErrorCode;\nconst FieldType = {\n    String: \"String\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Array: \"Array\",\n    Boolean: \"Boolean\",\n    Null: \"Null\",\n    GeoPoint: \"GeoPoint\",\n    Timestamp: \"Date\",\n    Command: \"Command\",\n    ServerDate: \"ServerDate\"\n};\nexports.FieldType = FieldType;\nconst OrderDirectionList = [\"desc\", \"asc\"];\nexports.OrderDirectionList = OrderDirectionList;\nconst WhereFilterOpList = [\"<\", \"<=\", \"==\", \">=\", \">\"];\nexports.WhereFilterOpList = WhereFilterOpList;\nvar Opeartor;\n(function (Opeartor) {\n    Opeartor[\"lt\"] = \"<\";\n    Opeartor[\"gt\"] = \">\";\n    Opeartor[\"lte\"] = \"<=\";\n    Opeartor[\"gte\"] = \">=\";\n    Opeartor[\"eq\"] = \"==\";\n})(Opeartor || (Opeartor = {}));\nexports.Opeartor = Opeartor;\nconst OperatorMap = {\n    [Opeartor.eq]: \"$eq\",\n    [Opeartor.lt]: \"$lt\",\n    [Opeartor.lte]: \"$lte\",\n    [Opeartor.gt]: \"$gt\",\n    [Opeartor.gte]: \"$gte\"\n};\nexports.OperatorMap = OperatorMap;\nconst UpdateOperatorList = [\n    \"$set\",\n    \"$inc\",\n    \"$mul\",\n    \"$unset\",\n    \"$push\",\n    \"$pop\",\n    \"$unshift\",\n    \"$shift\",\n    \"$currentDate\",\n    \"$each\",\n    \"$position\"\n];\nexports.UpdateOperatorList = UpdateOperatorList;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constant_1 = require(\"./constant\");\nconst point_1 = require(\"./geo/point\");\nconst command_1 = require(\"./command\");\nconst deepAssign = require(\"deep-assign\");\nconst serverDate_1 = require(\"./serverDate\");\nclass Util {\n}\nUtil.encodeGeoPoint = (point) => {\n    if (!(point instanceof point_1.Point)) {\n        throw new Error(\"encodeGeoPoint: must be GeoPoint type\");\n    }\n    return {\n        type: \"Point\",\n        coordinates: [point.longitude, point.latitude]\n    };\n};\nUtil.encodeServerDate = (serverDate) => {\n    return { $date: { offset: serverDate.offset } };\n};\nUtil.encodeTimestamp = (stamp) => {\n    if (!(stamp instanceof Date)) {\n        throw new Error(\"encodeTimestamp: must be Date type\");\n    }\n    return {\n        $date: stamp.getTime()\n    };\n};\nUtil.encodeDocumentDataForReq = (document, merge = false, concatKey = true) => {\n    const keys = Object.keys(document);\n    let params = {};\n    if (Array.isArray(document)) {\n        params = [];\n    }\n    const getCommandVal = (obj) => {\n        let res = {};\n        let command = new command_1.Command();\n        command.concatKeys(obj, '', res);\n        for (let key in res) {\n            if (res[key] instanceof command_1.Command) {\n                res[key] = res[key].parse(key);\n            }\n        }\n        return res;\n    };\n    keys.forEach(key => {\n        const item = document[key];\n        const type = Util.whichType(item);\n        let realValue;\n        if (type === constant_1.FieldType.GeoPoint) {\n            realValue = { [key]: Util.encodeGeoPoint(item) };\n        }\n        else if (type === constant_1.FieldType.Timestamp) {\n            realValue = { [key]: Util.encodeTimestamp(item) };\n        }\n        else if (type === constant_1.FieldType.ServerDate) {\n            realValue = { [key]: Util.encodeServerDate(item) };\n        }\n        else if (type === constant_1.FieldType.Object) {\n            if (concatKey) {\n                realValue = getCommandVal({ [key]: item });\n            }\n            else {\n                realValue = { [key]: Util.encodeDocumentDataForReq(item, merge, concatKey) };\n            }\n        }\n        else if (type === constant_1.FieldType.Command) {\n            realValue = item.parse(key);\n        }\n        else {\n            realValue = { [key]: item };\n        }\n        if (constant_1.UpdateOperatorList.indexOf(Object.keys(realValue)[0]) === -1 && merge === true) {\n            realValue = { $set: realValue };\n        }\n        if (Array.isArray(params)) {\n            params.push(realValue);\n        }\n        else {\n            params = deepAssign({}, params, realValue);\n        }\n    });\n    if (params.$set) {\n        for (let concatKey in params.$set) {\n            for (let key in params.$set[concatKey]) {\n                if (constant_1.UpdateOperatorList.indexOf(key) > -1) {\n                    if (params[key] === undefined) {\n                        params[key] = Object.assign({}, params.$set[concatKey][key]);\n                    }\n                    else {\n                        params[key] = Object.assign({}, params[key], params.$set[concatKey][key]);\n                    }\n                    delete params.$set[concatKey];\n                }\n            }\n        }\n        if (Object.keys(params.$set).length === 0) {\n            delete params.$set;\n        }\n    }\n    return params;\n};\nUtil.formatResDocumentData = (documents) => {\n    return documents.map(document => {\n        return Util.formatField(document);\n    });\n};\nUtil.formatField = document => {\n    const keys = Object.keys(document);\n    let protoField = {};\n    if (Array.isArray(document)) {\n        protoField = [];\n    }\n    keys.forEach(key => {\n        const item = document[key];\n        const type = Util.whichType(item);\n        let realValue;\n        switch (type) {\n            case constant_1.FieldType.GeoPoint:\n                realValue = new point_1.Point(item.coordinates[0], item.coordinates[1]);\n                break;\n            case constant_1.FieldType.Timestamp:\n                realValue = new Date(item.$date);\n                break;\n            case constant_1.FieldType.Object:\n            case constant_1.FieldType.Array:\n                realValue = Util.formatField(item);\n                break;\n            case constant_1.FieldType.ServerDate:\n                realValue = new Date(item.$date);\n                break;\n            default:\n                realValue = item;\n        }\n        if (Array.isArray(protoField)) {\n            protoField.push(realValue);\n        }\n        else {\n            protoField[key] = realValue;\n        }\n    });\n    return protoField;\n};\nUtil.whichType = (obj) => {\n    let type = Object.prototype.toString.call(obj).slice(8, -1);\n    if (type === constant_1.FieldType.Object) {\n        if (obj instanceof point_1.Point) {\n            return constant_1.FieldType.GeoPoint;\n        }\n        else if (obj instanceof Date) {\n            return constant_1.FieldType.Timestamp;\n        }\n        else if (obj instanceof command_1.Command) {\n            return constant_1.FieldType.Command;\n        }\n        else if (obj instanceof serverDate_1.ServerDate) {\n            return constant_1.FieldType.ServerDate;\n        }\n        if (obj.$timestamp) {\n            type = constant_1.FieldType.Timestamp;\n        }\n        else if (obj.$date) {\n            type = constant_1.FieldType.ServerDate;\n        }\n        else if (Array.isArray(obj.coordinates) && obj.type === \"Point\") {\n            type = constant_1.FieldType.GeoPoint;\n        }\n    }\n    return type;\n};\nUtil.generateDocId = () => {\n    let chars = \"ABCDEFabcdef0123456789\";\n    let autoId = \"\";\n    for (let i = 0; i < 24; i++) {\n        autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return autoId;\n};\nexports.Util = Util;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst regexp_1 = require(\"./regexp\");\nconst geo_1 = require(\"./geo\");\nclass Command {\n    constructor(logicParam) {\n        this.logicParam = {};\n        this.placeholder = \"{{{AAA}}}\";\n        this.toString = () => {\n            return this.logicParam[0];\n        };\n        if (logicParam) {\n            this.logicParam = logicParam;\n        }\n    }\n    eq(target) {\n        return new Command(this.baseOperate(\"$eq\", target));\n    }\n    neq(target) {\n        return new Command(this.baseOperate(\"$ne\", target));\n    }\n    gt(target) {\n        return new Command(this.baseOperate(\"$gt\", target));\n    }\n    gte(target) {\n        return new Command(this.baseOperate(\"$gte\", target));\n    }\n    lt(target) {\n        return new Command(this.baseOperate(\"$lt\", target));\n    }\n    lte(target) {\n        return new Command(this.baseOperate(\"$lte\", target));\n    }\n    in(target) {\n        return new Command(this.baseOperate(\"$in\", target));\n    }\n    nin(target) {\n        return new Command(this.baseOperate(\"$nin\", target));\n    }\n    regex(target) {\n        return regexp_1.RegExpConstructor({\n            regexp: target.regex,\n            options: target.options\n        });\n    }\n    mul(target) {\n        return new Command({ $mul: { [this.placeholder]: target } });\n    }\n    remove() {\n        return new Command({ $unset: { [this.placeholder]: \"\" } });\n    }\n    inc(target) {\n        return new Command({ $inc: { [this.placeholder]: target } });\n    }\n    set(target) {\n        return new Command({ $set: { [this.placeholder]: target } });\n    }\n    push(target) {\n        let value = target;\n        if (Array.isArray(target)) {\n            value = { $each: target };\n        }\n        return new Command({ $push: { [this.placeholder]: value } });\n    }\n    pop() {\n        return new Command({ $pop: { [this.placeholder]: 1 } });\n    }\n    unshift(target) {\n        let value = { $each: [target], $position: 0 };\n        if (Array.isArray(target)) {\n            value = { $each: target, $position: 0 };\n        }\n        return new Command({\n            $push: { [this.placeholder]: value }\n        });\n    }\n    shift() {\n        return new Command({ $pop: { [this.placeholder]: -1 } });\n    }\n    baseOperate(operator, target) {\n        if (target instanceof Date) {\n            return {\n                [this.placeholder]: {\n                    [operator]: {\n                        $date: target.getTime()\n                    }\n                }\n            };\n        }\n        if (target instanceof geo_1.Point) {\n            return {\n                [this.placeholder]: {\n                    [operator]: {\n                        type: 'Point',\n                        coordinates: [target.longitude, target.latitude]\n                    }\n                }\n            };\n        }\n        return {\n            [this.placeholder]: { [operator]: target }\n        };\n    }\n    and(...targets) {\n        if (targets.length === 1 && Array.isArray(targets[0])) {\n            targets = targets[0];\n        }\n        return new Command(this.connectOperate(\"$and\", targets));\n    }\n    or(...targets) {\n        if (targets.length === 1 && Array.isArray(targets[0])) {\n            targets = targets[0];\n        }\n        return new Command(this.connectOperate(\"$or\", targets));\n    }\n    connectOperate(operator, targets) {\n        let logicParams = [];\n        if (Object.keys(this.logicParam).length > 0) {\n            logicParams.push(this.logicParam);\n        }\n        for (let target of targets) {\n            if (target instanceof Command) {\n                if (Object.keys(target.logicParam).length === 0) {\n                    continue;\n                }\n                logicParams.push(target.logicParam);\n            }\n            else {\n                if (target instanceof regexp_1.RegExp) {\n                    logicParams.push({\n                        [this.placeholder]: {\n                            $regex: target.regexp,\n                            $options: target.options\n                        }\n                    });\n                    continue;\n                }\n                let tmp = {};\n                this.concatKeys(target, '', tmp);\n                let tmp1 = {};\n                for (let keys in tmp) {\n                    let value = tmp[keys];\n                    if (value instanceof Command) {\n                        Object.assign(tmp1, value.parse(keys));\n                    }\n                    else {\n                        Object.assign(tmp1, {\n                            [keys]: value\n                        });\n                    }\n                }\n                logicParams.push(tmp1);\n            }\n        }\n        this.logicParam = [];\n        return {\n            [operator]: logicParams\n        };\n    }\n    parse(key) {\n        return JSON.parse(JSON.stringify(this.logicParam).replace(/{{{AAA}}}/g, key));\n    }\n    concatKeys(obj, key, res) {\n        let keys, value;\n        for (let k in obj) {\n            if (typeof obj[k] === 'object' &&\n                obj[k] instanceof Command === false) {\n                keys = key ? key + '.' + k : k;\n                this.concatKeys(obj[k], keys, res);\n            }\n            else {\n                keys = key ? key + '.' + k : k;\n                value = obj[k];\n                Object.assign(res, { [keys]: value });\n            }\n        }\n    }\n}\nexports.Command = Command;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass RegExp {\n    constructor({ regexp, options }) {\n        if (!regexp) {\n            throw new TypeError(\"regexp must be a string\");\n        }\n        this.regexp = regexp;\n        this.options = options;\n    }\n    parse(key) {\n        return {\n            [key]: {\n                $regex: this.regexp,\n                $options: this.options\n            }\n        };\n    }\n}\nexports.RegExp = RegExp;\nfunction RegExpConstructor(param) {\n    return new RegExp(param);\n}\nexports.RegExpConstructor = RegExpConstructor;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass ServerDate {\n    constructor({ offset }) {\n        this.offset = offset;\n    }\n}\nexports.ServerDate = ServerDate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst document_1 = require(\"./document\");\nconst query_1 = require(\"./query\");\nclass CollectionReference extends query_1.Query {\n    constructor(db, coll) {\n        super(db, coll);\n    }\n    get name() {\n        return this._coll;\n    }\n    doc(docID) {\n        return new document_1.DocumentReference(this._db, this._coll, docID);\n    }\n    add(data) {\n        let docRef = this.doc();\n        return docRef.create(data);\n    }\n}\nexports.CollectionReference = CollectionReference;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request_1 = require(\"./request\");\nconst util_1 = require(\"./util\");\nconst command_1 = require(\"./command\");\nclass DocumentReference {\n    constructor(db, coll, docID, projection = {}) {\n        this._db = db;\n        this._coll = coll;\n        this.id = docID;\n        this.request = new request_1.Request(this._db);\n        this.projection = projection;\n    }\n    create(data) {\n        let params = {\n            collectionName: this._coll,\n            data: util_1.Util.encodeDocumentDataForReq(data, false, false)\n        };\n        if (this.id) {\n            params[\"_id\"] = this.id;\n        }\n        return new Promise(resolve => {\n            this.request.send(\"addDocument\", params).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                resolve({\n                    id: res.data._id,\n                    requestId: res.requestId\n                });\n            });\n        });\n    }\n    set(data) {\n        if (!data || typeof data !== \"object\") {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '参数必需是非空对象'\n            });\n        }\n        if (data.hasOwnProperty('_id')) {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '不能更新_id的值'\n            });\n        }\n        let hasOperator = false;\n        const checkMixed = (objs) => {\n            if (typeof objs === 'object') {\n                for (let key in objs) {\n                    if (objs[key] instanceof command_1.Command) {\n                        hasOperator = true;\n                    }\n                    else if (typeof objs[key] === 'object') {\n                        checkMixed(objs[key]);\n                    }\n                }\n            }\n        };\n        checkMixed(data);\n        if (hasOperator) {\n            return Promise.resolve({\n                code: 'DATABASE_REQUEST_FAILED',\n                message: 'update operator complicit'\n            });\n        }\n        const merge = false;\n        let param = {\n            collectionName: this._coll,\n            data: util_1.Util.encodeDocumentDataForReq(data, merge, false),\n            multi: false,\n            merge,\n            upsert: true\n        };\n        if (this.id) {\n            param[\"query\"] = { _id: this.id };\n        }\n        return new Promise(resolve => {\n            this.request.send(\"updateDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        updated: res.data.updated,\n                        upsertedId: res.data.upserted_id,\n                        requestId: res.requestId\n                    });\n                }\n            });\n        });\n    }\n    update(data) {\n        if (!data || typeof data !== \"object\") {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '参数必需是非空对象'\n            });\n        }\n        if (data.hasOwnProperty('_id')) {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '不能更新_id的值'\n            });\n        }\n        const query = { _id: this.id };\n        const merge = true;\n        const param = {\n            collectionName: this._coll,\n            data: util_1.Util.encodeDocumentDataForReq(data, merge, true),\n            query: query,\n            multi: false,\n            merge,\n            upsert: false\n        };\n        return new Promise(resolve => {\n            this.request.send(\"updateDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        updated: res.data.updated,\n                        upsertedId: res.data.upserted_id,\n                        requestId: res.requestId\n                    });\n                }\n            });\n        });\n    }\n    remove() {\n        const query = { _id: this.id };\n        const param = {\n            collectionName: this._coll,\n            query: query,\n            multi: false\n        };\n        return new Promise(resolve => {\n            this.request.send(\"deleteDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        deleted: res.data.deleted,\n                        requestId: res.requestId\n                    });\n                }\n            });\n        });\n    }\n    get() {\n        const query = { _id: this.id };\n        const param = {\n            collectionName: this._coll,\n            query: query,\n            multi: false,\n            projection: this.projection\n        };\n        return new Promise(resolve => {\n            this.request.send(\"queryDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    const documents = util_1.Util.formatResDocumentData(res.data.list);\n                    resolve({\n                        data: documents,\n                        requestId: res.requestId,\n                        total: res.TotalCount,\n                        limit: res.Limit,\n                        offset: res.Offset\n                    });\n                }\n            });\n        });\n    }\n    field(projection) {\n        for (let k in projection) {\n            if (projection[k]) {\n                projection[k] = 1;\n            }\n            else {\n                projection[k] = 0;\n            }\n        }\n        return new DocumentReference(this._db, this._coll, this.id, projection);\n    }\n}\nexports.DocumentReference = DocumentReference;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst requestHandler = require(\"../utils/httpRequest\");\nclass Request {\n    constructor(db) {\n        this.db = db;\n    }\n    send(api, data) {\n        const params = Object.assign({}, data, {\n            action: `database.${api}`\n        });\n        return requestHandler({\n            config: this.db.config.config,\n            params,\n            method: \"post\",\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        });\n    }\n}\nexports.Request = Request;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request_1 = require(\"./request\");\nconst validate_1 = require(\"./validate\");\nconst util_1 = require(\"./util\");\nconst command_1 = require(\"./command\");\nconst regexp_1 = require(\"./regexp\");\nconst isRegExp = require(\"is-regex\");\nconst geo_1 = require(\"./geo\");\nclass Query {\n    constructor(db, coll, fieldFilters, fieldOrders, queryOptions) {\n        this._db = db;\n        this._coll = coll;\n        this._fieldFilters = fieldFilters;\n        this._fieldOrders = fieldOrders || [];\n        this._queryOptions = queryOptions || {};\n        this._request = new request_1.Request(this._db);\n    }\n    get() {\n        let newOder = [];\n        if (this._fieldOrders) {\n            this._fieldOrders.forEach(order => {\n                newOder.push(order);\n            });\n        }\n        let param = {\n            collectionName: this._coll\n        };\n        if (this._fieldFilters) {\n            param.query = this._fieldFilters;\n        }\n        if (newOder.length > 0) {\n            param.order = newOder;\n        }\n        if (this._queryOptions.offset) {\n            param.offset = this._queryOptions.offset;\n        }\n        if (this._queryOptions.limit) {\n            param.limit =\n                this._queryOptions.limit < 100 ? this._queryOptions.limit : 100;\n        }\n        else {\n            param.limit = 100;\n        }\n        if (this._queryOptions.projection) {\n            param.projection = this._queryOptions.projection;\n        }\n        return new Promise(resolve => {\n            this._request.send(\"queryDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    const documents = util_1.Util.formatResDocumentData(res.data.list);\n                    const result = {\n                        data: documents,\n                        requestId: res.requestId\n                    };\n                    if (res.TotalCount)\n                        result.total = res.TotalCount;\n                    if (res.Limit)\n                        result.limit = res.Limit;\n                    if (res.Offset)\n                        result.offset = res.Offset;\n                    resolve(result);\n                }\n            });\n        });\n    }\n    count() {\n        let param = {\n            collectionName: this._coll\n        };\n        if (this._fieldFilters) {\n            param.query = this._fieldFilters;\n        }\n        return new Promise(resolve => {\n            this._request.send(\"countDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        requestId: res.requestId,\n                        total: res.data.total\n                    });\n                }\n            });\n        });\n    }\n    where(query) {\n        return new Query(this._db, this._coll, this.convertParams(query), this._fieldOrders, this._queryOptions);\n    }\n    orderBy(fieldPath, directionStr) {\n        validate_1.Validate.isFieldPath(fieldPath);\n        validate_1.Validate.isFieldOrder(directionStr);\n        const newOrder = {\n            field: fieldPath,\n            direction: directionStr\n        };\n        const combinedOrders = this._fieldOrders.concat(newOrder);\n        return new Query(this._db, this._coll, this._fieldFilters, combinedOrders, this._queryOptions);\n    }\n    limit(limit) {\n        validate_1.Validate.isInteger(\"limit\", limit);\n        let option = Object.assign({}, this._queryOptions);\n        option.limit = limit;\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\n    }\n    skip(offset) {\n        validate_1.Validate.isInteger(\"offset\", offset);\n        let option = Object.assign({}, this._queryOptions);\n        option.offset = offset;\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\n    }\n    update(data) {\n        if (!data || typeof data !== \"object\") {\n            return Promise.resolve({\n                code: \"INVALID_PARAM\",\n                message: \"参数必需是非空对象\"\n            });\n        }\n        if (data.hasOwnProperty(\"_id\")) {\n            return Promise.resolve({\n                code: \"INVALID_PARAM\",\n                message: \"不能更新_id的值\"\n            });\n        }\n        let param = {\n            collectionName: this._coll,\n            query: this._fieldFilters,\n            multi: true,\n            merge: true,\n            upsert: false,\n            data: util_1.Util.encodeDocumentDataForReq(data, true)\n        };\n        return new Promise(resolve => {\n            this._request.send(\"updateDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        requestId: res.requestId,\n                        updated: res.data.updated,\n                        upsertId: res.data.upsert_id\n                    });\n                }\n            });\n        });\n    }\n    field(projection) {\n        for (let k in projection) {\n            if (projection[k]) {\n                projection[k] = 1;\n            }\n            else {\n                projection[k] = 0;\n            }\n        }\n        let option = Object.assign({}, this._queryOptions);\n        option.projection = projection;\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\n    }\n    remove() {\n        const param = {\n            collectionName: this._coll,\n            query: this._fieldFilters,\n            multi: true\n        };\n        return new Promise(resolve => {\n            this._request.send(\"deleteDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        requestId: res.requestId,\n                        deleted: res.data.deleted\n                    });\n                }\n            });\n        });\n    }\n    convertParams(query) {\n        let queryParam = {};\n        if (query instanceof command_1.Command) {\n            queryParam = query.parse();\n        }\n        else {\n            for (let key in query) {\n                if (query[key] instanceof command_1.Command || query[key] instanceof regexp_1.RegExp || query[key] instanceof geo_1.Point) {\n                    queryParam = Object.assign({}, queryParam, query[key].parse(key));\n                }\n                else if (isRegExp(query[key])) {\n                    queryParam = {\n                        [key]: {\n                            $regex: query[key].source,\n                            $options: query[key].flags\n                        }\n                    };\n                }\n                else if (typeof query[key] === \"object\") {\n                    let command = new command_1.Command();\n                    let tmp = {};\n                    command.concatKeys({ [key]: query[key] }, \"\", tmp);\n                    let keys = Object.keys(tmp)[0];\n                    let value = tmp[keys];\n                    if (value instanceof command_1.Command) {\n                        value = value.parse(keys);\n                    }\n                    else {\n                        value = { [keys]: value };\n                    }\n                    queryParam = Object.assign({}, queryParam, value);\n                }\n                else {\n                    queryParam = Object.assign({}, queryParam, { [key]: query[key] });\n                }\n            }\n        }\n        return queryParam;\n    }\n}\nexports.Query = Query;\n","const httpRequest = require(\"../utils/httpRequest\");\n\n/**\n * 调用云函数\n * @param {String} name  函数名\n * @param {Object} functionParam 函数参数\n * @return {Promise}\n */\nfunction callFunction({ name, data }) {\n  try {\n    data = data ? JSON.stringify(data) : \"\";\n  } catch (e) {\n    return Promise.reject(e);\n  }\n  if (!name) {\n    return Promise.reject(\n      new Error({\n        message: \"函数名不能为空\"\n      })\n    );\n  }\n\n  let params = {\n    action: \"functions.invokeFunction\",\n    function_name: name,\n    request_data: data\n  };\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: \"post\",\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }).then(res => {\n    // console.log(res);\n    if (res.code) {\n      return res;\n    } else {\n      let result = res.data.response_data\n      try {\n        result = JSON.parse(res.data.response_data)\n      } catch (e) { }\n      return {\n        result,\n        requestId: res.requestId\n      };\n    }\n  });\n}\n\nexports.callFunction = callFunction;\n","const httpRequest = require(\"../utils/httpRequest\");\n\nexports.callWxOpenApi = function ({ apiName, requestData } = {}) {\n    try {\n        requestData = requestData ? JSON.stringify(requestData) : \"\";\n    } catch (e) {\n        throw Error(e)\n    }\n\n    const wxCloudApiToken = process.env.WX_API_TOKEN || ''\n\n    let params = {\n        action: \"wx.api\",\n        apiName,\n        requestData,\n        wxCloudApiToken\n    };\n\n    return httpRequest({\n        config: this.config,\n        params,\n        method: \"post\",\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then(res => {\n        // console.log(res);\n        if (res.code) {\n            return res;\n        } else {\n            let result = res.data.responseData\n            try {\n                result = JSON.parse(res.data.responseData)\n            } catch (e) { }\n            return {\n                result,\n                requestId: res.requestId\n            };\n        }\n    });\n}\n"]}